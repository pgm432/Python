visibility of variables
                        (or)
                  Accessbility of variables
                        (or)
                     scope of variables
            --------------------------------------
===> In python, the scope of a variable defines the region of the program
     where that variable accessible and recognized.
===> It determines the visibility and lifetime of a variable within the code.
===> python uses the LEGB rule to determine the order in which it searches
     for a variable.

         LEGB ===>
              L  ==> Local
              E  ===> Enclosing(E) (or) nonlocal
              G  ===> Global
              B  ===> built-in function (or) keyword
Note:
    when a variable is referenced, python searches for it in this order:
        Local,then Enclosing, then Global, and finally Built-in(LEGB).
    The first instance of the varible found in this hierarchy is the one used.
    if the variable is not found in any of these scopes, then it returns
    NameError.


==> python supports 3 types of variables. These are:
                1. local variables
                2. global variables
                3. nonlocal variables
          
 

1. local variables:
-----------------------
    The variables which are declared inside a function.
    These variables are called local variables.

ex-1:  
def display():
    for i in range(1,6,1): 
        print(i)

        

display()
 
          Here, 'i' is called local variable
          because, it is declared inside a function

ex-2:  
def f1():
    x=10
    print(x)

def f2():
    y=20
    print(y)

def f3():
    z=30
    print(z)

f1()
f2()
f3()



ex-3:  
def f1():
    x=10
    print(x)
    y=20
    print(y)
    z=30
    print(z)
 

f1()




 
     Here, x,y,z are called local variables
          because, all these variables are  declared inside a function


 

  
2. global variables
-----------------------
    The variables which are declared outside a function.
    These variables are called global variables.
    i.e. The variables are declared begining of the program.
    
ex-1:   
m = 11
n = 22
def f1():
    x=10
    print('In f1 ...')
    print(x)
    print(m)
    print(n)

def f2():
    y=20
    print('In f2 ...')
    print(y)
    print(m)
    print(n)

def f3():
    print('In f3 ...')
    z=30
    print(z)
    print(m)
    print(n)

f1()
f2()
f3()
print('In Main Program ...')
print(m)
print(n)






 
 
     Here,
     ===> x,y,z are called local variables
          because, all these variables are  declared inside a function

     ===> m,n are called global variables,
          becuase, these variables are declared outside a function.
 
 


ex-2:    
m = 11
n = 22
def f1():
    x=10
    print('In f1 ...')
    print(x)
    print(m)
    print(n)
    x=x+6
    print(x)
    m=m+6
    print(m)

 

f1()  

Note: It returns , error, because, you trying to change global variable value.
UnboundLocalError: cannot access local variable 'm'
     where it is not associated with a value



ex-3: write a program demo for global variable 
x = 10
def my_function():
    print(x)
    

my_function()
print(x)
